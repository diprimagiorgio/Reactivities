{"version":3,"sources":["app/models/pagination.ts","app/api/agent.ts","app/models/activity.ts","app/models/profile.ts","app/stores/activityStore.ts","app/stores/profileStore.ts","app/stores/userStore.ts","app/stores/store.ts","app/stores/commonStore.ts","app/stores/modalStore.ts","app/stores/commentStore.ts","app/layout/NavBar.tsx","features/activities/dashboard/ActivityFilter.tsx","features/profiles/FollowButton.tsx","features/profiles/ProfileCard.tsx","features/activities/dashboard/ActivityListItemAttendee.tsx","features/activities/dashboard/ActivityListItem.tsx","features/activities/dashboard/ActivityList.tsx","features/activities/dashboard/ActivityListItemPlaceholder.tsx","features/activities/dashboard/ActivityDashboard.tsx","app/layout/LoadingComponents.tsx","app/common/form/MyTextInput.tsx","app/common/form/MyTextArea.tsx","app/common/form/MySelectinput.tsx","app/common/options/categoryOptions.ts","app/common/form/MyDateInput.tsx","features/activities/forms/ActivityForm.tsx","features/users/LoginForm.tsx","features/errors/ValidationErrors.tsx","features/users/RegisterForm.tsx","features/home/HomePage.tsx","features/activities/details/ActivityDetailedChat.tsx","features/activities/details/ActivityDetailedInfo.tsx","features/activities/details/ActivityDetailedSidebar.tsx","features/activities/details/ActivityDetaledHeader.tsx","features/activities/details/ActivityDetails.tsx","features/errors/TestError.tsx","features/errors/NotFound.tsx","features/errors/ServerError.tsx","app/common/modals/ModalContainer.tsx","features/profiles/ProfileActivities.tsx","features/profiles/ProfileFollowings.tsx","app/common/imageUpload/PhotoWidgetCropper.tsx","app/common/imageUpload/PhotoWidgetDropzone.tsx","app/common/imageUpload/PhotoUploadWidget.tsx","features/profiles/ProfilePhotos.tsx","features/profiles/ProfileContent.tsx","features/profiles/ProfileHeader.tsx","features/profiles/ProfilePage.tsx","app/layout/PrivateRoute.tsx","app/layout/App.tsx","reportWebVitals.ts","app/layout/ScrollToTop.tsx","index.tsx"],"names":["PaginatedResult","data","pagination","this","PagingParams","pageNumber","pageSize","axios","defaults","baseURL","process","interceptors","request","use","config","token","store","commonStore","headers","Authorization","response","a","JSON","parse","error","status","toast","method","errors","hasOwnProperty","history","push","modalStateErrors","key","flat","setServerError","Promise","reject","responseBody","requests","url","get","then","body","post","put","delete","agent","Activities","list","params","details","id","create","activity","update","attend","Account","current","login","user","register","Profiles","username","uploadProfile","file","formData","FormData","append","setMainPhoto","deletePhoto","updateFollowing","listFollowings","predicate","listUserActivities","Activity","init","Object","assign","ActivityFormValues","undefined","title","category","description","date","city","venue","Profile","displayName","image","ActivityStore","activityRegistry","Map","selectedActivity","editMode","loading","loadingInitial","pagingParams","set","setPagingParams","setPredicate","value","resetPredicate","forEach","loadActivities","setLoadingInitial","axiosParam","res","setActivity","setPagination","console","log","loadActivity","userStore","isGoing","attendees","some","isHost","hostUsername","host","find","x","Date","state","createActivity","attendee","newActivity","runInAction","updateActivity","updatedActivity","deleteActivity","updateAttendance","filter","cancelActivityToggle","isCancelled","clearSelectedActivity","updateAttendeeFollowing","following","followersCount","makeAutoObservable","reaction","keys","clear","URLSearchParams","toString","toISOString","Array","from","values","sort","b","getTime","entries","activitiesByDate","reduce","activities","format","ProfileStore","profile","loadingProfile","uploading","followings","loadingFollowings","activeTab","loadingActivities","userActivities","setActiveTab","loadProfile","uploadPhoto","photo","photos","isMain","setImage","p","activityStore","followingCount","loadFollowings","loadUserActivities","UserStore","cred","setToken","modalStore","closeModal","logout","getUser","creds","window","localStorage","getItem","appLoaded","setAppLoaded","setItem","removeItem","modal","open","openModal","content","profileStore","commentStore","comments","hubConnection","createHubConnection","activityId","HubConnectionBuilder","withUrl","accessTokenFactory","withAutomaticReconnect","configureLogging","LogLevel","Information","build","start","catch","on","comment","createdAt","unshift","stopHubConnection","stop","clearComments","addComment","invoke","StoreContext","createContext","useStore","useContext","observer","Menu","inverted","fixed","Container","Item","as","NavLink","to","exact","header","src","alt","style","marginRight","name","Button","positive","position","Image","avatar","spaced","Dropdown","pointing","text","Link","icon","onClick","ActivityFilters","vertical","size","width","marginTop","Header","attached","color","active","has","onChange","Reveal","animated","Content","visible","fluid","hidden","basic","e","preventDefault","handleFollow","Card","Description","extra","Icon","styles","borderColor","borderWidth","List","horizontal","map","Popup","hoverable","trigger","circular","bordered","ActivityListItem","Segment","Group","Label","textAlign","marginBottom","secondary","clearing","floated","groupedActivities","group","sub","ActivityListItemPlaceholder","Placeholder","minHeight","Line","Paragraph","disabled","useState","loadingNext","setLoadingNext","useEffect","Grid","Column","pageStart","loadMore","currentPage","hasMore","totalPages","initialLoad","Loader","LoadingComponent","Dimmer","MyTextInput","props","useField","field","meta","Form","Field","touched","label","MyTextArea","MySelectInput","helpers","Select","clearable","options","d","setValue","onBlur","setTouched","placeholder","categoryOptions","MyDateInput","selected","useHistory","useParams","validationSchema","Yup","required","nullable","enableReinitialize","initialValues","onSubmit","uuid","handleFormSubmit","isValid","isSubmitting","dirty","handleSubmit","className","autoComplete","rows","placeholderText","showTimeSelect","timeCaption","dateFormat","subheader","type","email","password","setErrors","render","ValidationErrors","Message","err","i","isLoggedIn","border","resetForm","onKeyPress","shiftKey","Comment","Avatar","Author","Metadata","formatDistanceToNow","Text","whiteSpace","verticalAlign","length","relaxed","divided","ribbon","Extra","activityImageStyle","activityImageTextStyle","bottom","left","height","padding","zIndex","top","TestErrors","widths","baseUrl","primary","NotFound","Inline","message","Modal","onClose","panes","menuItem","pane","Tab","Pane","menu","onTabChange","activeIndex","handleTabChange","itemsPerRow","objectFit","Meta","PhotoWidgetCropper","imagePreview","setCropper","initialAspectRatio","aspectRatio","preview","guides","viewMode","autoCropArea","background","onInitialized","cropper","PhotoWidgetDropzone","setFiles","dzStyles","borderRadius","paddingTop","onDrop","useCallback","acceptedFiles","URL","createObjectURL","useDropzone","getRootProps","getInputProps","isDragActive","PhotoUploadWidget","files","revokeObjectURL","overflow","getCroppedCanvas","toBlob","blob","isCurrentUser","addPhotoMode","setAddPhotoMode","target","setTarget","currentTarget","handleSetMainPhoto","handleDeletePhoto","menuPosition","Statistic","Divider","PrivateRoute","Component","component","rest","location","useLocation","finally","hideProgressBar","path","HomePage","ActivityDashboard","ActivityDetails","ActivityForm","ProfilePage","ServerError","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ScrollToTop","pathname","scrollTo","createBrowserHistory","ReactDOM","Provider","document","getElementById"],"mappings":"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","file":"static/js/main.1c15e4a7.chunk.js","sourcesContent":["export interface Pagination{\n    currentPage: number;\n    itemsPerPage: number;\n    totalItems: number;\n    totalPages: number;\n\n}\n\nexport class PaginatedResult<T>{\n    data: T;\n    pagination: Pagination;\n\n    constructor(data:T, pagination: Pagination){\n        this.data = data;\n        this.pagination = pagination;\n    }\n\n}\nexport class PagingParams {\n    pageNumber;\n    pageSize;\n    \n    constructor (pageNumber = 1, pageSize = 2 ){\n        this.pageNumber = pageNumber;\n        this.pageSize = pageSize;\n\n    }\n}","import axios, { AxiosError, AxiosResponse } from \"axios\";\nimport { toast } from \"react-toastify\";\nimport { history } from \"../..\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport { PaginatedResult } from \"../models/pagination\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"../stores/store\";\n\nconst sleep = (delay: number) => {\n    return new Promise((resolve) => {\n        setTimeout(resolve, delay)\n    })\n}\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL;\n\naxios.interceptors.request.use(config => {\n    const token = store.commonStore.token;\n    if (token) config.headers!.Authorization = `Bearer ${token}`\n    return config;\n})\n\n\n// this code is going to be executed before returning the result\naxios.interceptors.response.use(async response => {\n    if ( process.env.NODE_ENV === 'development') await sleep(1000);\n    const pagination = response.headers['pagination'];\n    if(pagination){\n        response.data = new PaginatedResult(response.data, JSON.parse(pagination) );\n        return response as AxiosResponse<PaginatedResult<any>>;\n    }\n    return response;\n}, (error: AxiosError) =>{// all that is not 200 is going to be handle here\n    const {data, status, config} = error.response!;\n    switch(status){\n        case 400:\n            // handle the bad request\n            if(typeof data === 'string')\n                toast.error(data);\n            // to handle req with unformatted guid\n            if (config.method === 'get' && data.errors.hasOwnProperty('id')) {\n                history.push('/not-found');\n            }\n            if (data.errors) {\n                const modalStateErrors = [];\n                for (const key in data.errors) {\n                    if (data.errors[key]) {\n                        modalStateErrors.push(data.errors[key])\n                    }\n                }\n                throw modalStateErrors.flat();\n            } else {\n                toast.error(data);\n            }\n            break;\n        case 401:\n            toast.error('unauthorized!');\n            break;\n        case 404:\n            history.push(\"/not-found\");\n            toast.error('not found!');\n            break;\n        case 500:\n            store.commonStore.setServerError(data);\n            history.push('/server-error');\n            toast.error('Server error!');\n            break;\n    }\n    return Promise.reject(error);\n})\n\nconst responseBody = <T> (response: AxiosResponse<T>) => response.data;\nconst requests = {\n    get: <T> (url: string) => axios.get<T>(url).then(responseBody),\n    post: <T> (url: string, body: {}) => axios.post<T>(url, body).then(responseBody),\n    put: <T> (url: string, body: {}) => axios.put<T>(url, body).then(responseBody),\n    del: <T> (url: string) => axios.delete<T>(url).then(responseBody),\n}\nconst Activities = {\n    list: (params: URLSearchParams) => axios.get<PaginatedResult<Activity[]>>('/activities', {params})\n        .then(responseBody),\n    details: (id: string) => requests.get<Activity>(`/activities/${id}`),\n    create: (activity: ActivityFormValues) => requests.post<void>('/activities', activity),// in the generic we set the return type\n    update: (activity: ActivityFormValues) => requests.put<void>(`/activities/${activity.id}`, activity),\n    delete: (id: string) => requests.del<void>(`/activities/${id}`),\n    attend: (id: string) => requests.post<void>(`/activities/${id}/attend`, {})\n}\nconst Account = {\n    current: () => requests.get<User>('/account'),\n    login: (user: UserFormValues) => requests.post<User>('/account/login', user),\n    register: (user: UserFormValues) => requests.post<User>('/account/register', user),\n}\nconst Profiles = {\n    get: (username: string) => requests.get<Profile>(`/profiles/${username}`),\n    uploadProfile: (file: Blob) =>{\n        let formData = new FormData();\n        formData.append('File', file);\n        return axios.post<Photo>('photos', formData,{\n            headers: {'Content-type':'multipart/form-data'}\n        })\n    },\n    setMainPhoto: (id: string) => requests.post(`/photos/${id}/setMain`, {}),\n    deletePhoto: (id: string) => requests.del(`/photos/${id}`),\n    updateFollowing: (username: string) => requests.post( `/follow/${username}`,{}),\n    listFollowings: (username: string, predicate: string) => \n    requests.get<Profile[]>(`/follow/${username}?predicate=${predicate}`),\n    listUserActivities: (username: string, predicate: string) => \n    requests.get<UserActivity[]>(`/profiles/${username}/activities?predicate=${predicate}`),\n    \n}\nconst agent ={\n    Activities,\n    Account,\n    Profiles\n}\nexport default agent;","import { Profile } from \"./profile\";\n\n    // this is the TypeScript type generated with the jsontots online \n    export interface Activity {\n        id: string;\n        title: string;\n        date: Date | null;\n        description: string;\n        category: string;\n        city: string;\n        venue: string;\n        hostUsername: string;\n        isCancelled: boolean;\n        isGoing: boolean;\n        isHost: boolean;\n        host?: Profile;\n        attendees: Profile[]\n    }\n    export class Activity implements Activity {\n        constructor(init?: ActivityFormValues) {\n          Object.assign(this, init);\n        }\n      }\n    \n      export class ActivityFormValues {\n        id?: string = undefined;\n        title: string = '';\n        category: string = '';\n        description: string = '';\n        date: Date | null = null;\n        city: string = '';\n        venue: string = '';\n    \n        constructor(activity?: ActivityFormValues) {\n          if (activity) {\n            this.id = activity.id;\n            this.title = activity.title;\n            this.category = activity.category;\n            this.description = activity.description;\n            this.date = activity.date;\n            this.venue = activity.venue;\n            this.city = activity.city;\n          }\n        }\n      } \n","import { User } from \"./user\";\n\nexport interface Profile {\n    username: string;\n    displayName: string;\n    image?: string;\n    bio?: string;\n    photos? : Photo[];\n    followersCount: number;\n    followingCount: number;\n    following: boolean;\n}\n\nexport class Profile implements Profile {\n    constructor(user: User) {\n        this.username = user.username;\n        this.displayName = user.displayName;\n        this.image = user.image;\n    }\n}\nexport interface Photo{\n    id: string;\n    url: string;\n    isMain: boolean;\n}\nexport interface UserActivity{\n    id: string;\n    title: string;\n    category: string;\n    date: Date;\n}","import {  makeAutoObservable, reaction, runInAction} from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Activity, ActivityFormValues } from \"../models/activity\";\nimport {format} from 'date-fns';\nimport { store } from \"./store\";\nimport { Profile } from \"../models/profile\";\nimport { Pagination, PagingParams } from \"../models/pagination\";\n\nexport default class ActivityStore{\n    activityRegistry = new Map<string, Activity>();\n    selectedActivity: Activity | undefined = undefined;\n    editMode = false;\n    loading = false;\n    loadingInitial = false;\n    pagination: Pagination | null = null;\n    pagingParams = new PagingParams();\n    predicate = new Map().set('all', true);\n\n\n    constructor(){\n        makeAutoObservable(this);\n        reaction(\n            () => this.predicate.keys(),\n            () => {\n                this.pagingParams = new PagingParams();\n                this.activityRegistry.clear();\n                this.loadActivities();\n            }\n        )\n    }\n\n    setPagingParams = (pagingParams: PagingParams) =>{\n        this.pagingParams = pagingParams;\n    }\n\n    setPredicate = (predicate: string, value: string | Date) => {\n        const resetPredicate = () => {\n            this.predicate.forEach((value, key) => {\n                if (key !== 'startDate') this.predicate.delete(key);\n            })\n        }\n        switch (predicate) {\n            case 'all':\n                resetPredicate();\n                this.predicate.set('all', true);\n                break;\n            case 'isGoing':\n                resetPredicate();\n                this.predicate.set('isGoing', true);\n                break;\n            case 'isHost':\n                resetPredicate();\n                this.predicate.set('isHost', true);\n                break;\n            case 'startDate':\n                this.predicate.delete('startDate');\n                this.predicate.set('startDate', value);\n        }\n    } \n\n    get axiosParam(){\n        // it's going to add all the paramiter at the query string\n        const params = new URLSearchParams();\n        params.append('pageNumber', this.pagingParams.pageNumber.toString());\n        params.append('pageSize', this.pagingParams.pageSize.toString());\n        this.predicate.forEach((value, key) => {\n            if (key === 'startDate') {\n                params.append(key, (value as Date).toISOString())\n            } else {\n                params.append(key, value);\n            }\n        });\n        return params;\n    }\n    get activitiesByDate() {\n        return Array.from(this.activityRegistry.values()).sort((a, b) => \n            a.date!.getTime() - b.date!.getTime());\n    }\n\n    get groupedActivities(){\n        return Object.entries(\n            this.activitiesByDate.reduce((activities, activity) => {\n                const date =format(activity.date!,'dd MMM yyyy');\n                activities[date] = activities[date] ? [...activities[date], activity] : [activity];\n                return activities;\n            }, {} as {[key: string]: Activity[]})\n        )\n    }\n\n\n\n    loadActivities = async () => {\n        this.setLoadingInitial(true);\n        try {\n            const res = await agent.Activities.list(this.axiosParam);\n            res.data.forEach(activity => {\n                this.setActivity(activity);\n            });\n            this.setPagination(res.pagination);\n            this.setLoadingInitial(false);\n        } catch (error) {\n            console.log(error);\n            this.setLoadingInitial(false);\n\n        }\n    }\n    setPagination = (pagination: Pagination) => {\n        this.pagination = pagination;\n    }\n    loadActivity =   async (id: string) => {\n        let activity = this.activityRegistry.get(id);\n        if(activity){\n            // in this case we found it in memory\n            this.selectedActivity = activity;\n            return activity;\n        }else{\n            this.loadingInitial = true;\n            try {\n                \n                activity = await agent.Activities.details(id);\n                // we want to add it in memory\n                this.setActivity(activity);\n                this.setLoadingInitial(false);\n                this.selectedActivity = activity;\n                return activity;\n\n            } catch (error) {\n                console.log(error);\n                this.setLoadingInitial(false);\n            }\n        }\n        //we want to check if we have the activity in memory\n        // if not we are going to use the api to access the database\n    }\n    \n    // add activity in the regestry and set information about user partecipation\n    private setActivity = (activity: Activity) => {\n        const user = store.userStore.user;\n        if (user) {\n            activity.isGoing = activity.attendees!.some(\n                a => a.username === user.username\n            )\n            activity.isHost = activity.hostUsername === user.username;\n            activity.host = activity.attendees?.find(x => x.username === activity.hostUsername);\n        }\n        activity.date = new Date(activity.date!)\n        this.activityRegistry.set(activity.id, activity);\n    }\n    // to remove the warning changing (observed) observable values without using an action is not allowed\n    setLoadingInitial = (state: boolean) => {\n        this.loadingInitial = state;\n    }\n  \n    \n    createActivity = async (activity: ActivityFormValues) => {\n        const user = store.userStore.user;\n        const attendee = new Profile(user!);\n        try {\n            // save in db new activity\n            await agent.Activities.create(activity);\n            //update ojs for front end\n            const newActivity = new Activity(activity);\n            newActivity.hostUsername = user!.username;\n            newActivity.attendees = [attendee];\n            this.setActivity(newActivity);\n            runInAction(() => {\n                this.selectedActivity = newActivity;\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    updateActivity = async (activity: ActivityFormValues) => {\n        try {\n            await agent.Activities.update(activity);\n            runInAction(() => {\n                if (activity.id) {\n                    let updatedActivity = {...this.activityRegistry.get(activity.id), ...activity}\n                    this.activityRegistry.set(activity.id, updatedActivity as Activity);\n                    this.selectedActivity = updatedActivity as Activity;\n                    this.selectedActivity = activity as Activity;\n\n                }\n            })\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    deleteActivity = async (id: string) => {\n        this.loading = true;\n        try {\n            await agent.Activities.delete(id);\n            runInAction(() => {\n                this.activityRegistry.delete(id);\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => {\n                this.loading = false;\n            })\n        }\n    }\n\n\n    updateAttendance = async () => {\n        const user = store.userStore.user;\n        this.loading = true;\n        try {\n\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                // we want to remove the user\n                if (this.selectedActivity?.isGoing) {\n                    this.selectedActivity.attendees = \n                        this.selectedActivity.attendees?.filter(a => a.username !== user?.username);\n                    this.selectedActivity.isGoing = false;\n                } else {\n                    // we want to add the user to the attendees\n                    const attendee = new Profile(user!);\n                    this.selectedActivity?.attendees?.push(attendee);\n                    this.selectedActivity!.isGoing = true;\n                }\n                // we update also the object for frontend\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!)\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n    cancelActivityToggle = async () => {\n        this.loading = true;\n        try {\n            await agent.Activities.attend(this.selectedActivity!.id);\n            runInAction(() => {\n                this.selectedActivity!.isCancelled = !this.selectedActivity?.isCancelled;\n                this.activityRegistry.set(this.selectedActivity!.id, this.selectedActivity!);\n            })\n        } catch (error) {\n            console.log(error);\n        } finally {\n            runInAction(() => this.loading = false);\n        }\n    }\n    clearSelectedActivity = () => {\n        this.selectedActivity = undefined;\n    }\n    updateAttendeeFollowing = (username: string) => {\n        this.activityRegistry.forEach(activity => {\n            activity.attendees.forEach(attendee => {\n                if (attendee.username === username) {\n                    attendee.following ? attendee.followersCount-- : attendee.followersCount++;\n                    attendee.following = !attendee.following;\n                }\n            })\n        })\n    }\n} \n","import { makeAutoObservable, reaction, runInAction } from \"mobx\";\nimport agent from \"../api/agent\";\nimport { Photo, Profile, UserActivity } from \"../models/profile\";\nimport { store } from \"./store\";\n\nexport default class ProfileStore{\n    profile: Profile | null = null;\n    loadingProfile = false;\n    uploading= false;\n    loading = false;\n    followings : Profile[] = [];\n    loadingFollowings = false;\n    activeTab = 0;\n    // for user activities\n    loadingActivities = false;\n    userActivities: UserActivity[] = [];\n\n\n\n    constructor(){\n        makeAutoObservable(this);\n        reaction(\n            () => this.activeTab,\n            activeTab => {\n                if (activeTab === 3 || activeTab === 4) {\n                    const predicate = activeTab === 3 ? 'followers' : 'following';\n                    this.loadFollowings(predicate);\n                } else {\n                    this.followings = [];\n                }\n            }\n        )\n    }\n    setActiveTab = (activeTab: any) => {\n        this.activeTab = activeTab;\n    }\n    get isCurrentUser(){\n        if(store.userStore.user && this.profile){\n            return store.userStore.user.username && this.profile.username\n        }\n        return false;\n    }\n\n    loadProfile = async (username: string) => {\n        this.loadingProfile = true;\n        try {\n            const user = await agent.Profiles.get(username);\n            runInAction(() => this.profile = user);\n        } catch (error) {\n            console.log(error);\n        }finally{\n            runInAction(() =>this.loadingProfile = false);\n        }\n    }\n    uploadPhoto = async (file:Blob) =>{\n        this.uploading = true;\n        try {\n            // we update the app\n            const res = await agent.Profiles.uploadProfile(file);\n            const photo = res.data;\n            // now we need to uplad also the front-end\n            runInAction(() =>{\n                if (this.profile){\n                    this.profile.photos?.push(photo);\n                    if (photo.isMain && store.userStore.user) {\n                        store.userStore.setImage(photo.url);\n                        this.profile.image = photo.url;\n                    }\n                }\n            })\n\n        } catch (error) {\n            console.log(error);\n        }finally{\n            runInAction(() => this.uploading = false);\n        }\n    }\n    setMainPhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.setMainPhoto(photo.id);\n            store.userStore.setImage(photo.url);\n            runInAction(() => {\n                if (this.profile && this.profile.photos) {\n                    this.profile.photos.find(p => p.isMain)!.isMain = false;\n                    this.profile.photos.find(p => p.id === photo.id)!.isMain = true;\n                    this.profile.image = photo.url;\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n\n    deletePhoto = async (photo: Photo) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.deletePhoto(photo.id);\n            runInAction(() => {\n                if (this.profile) {\n                    this.profile.photos = this.profile.photos?.filter(p => p.id !== photo.id);\n                    this.loading = false;\n                }\n            })\n        } catch (error) {\n            runInAction(() => this.loading = false);\n            console.log(error);\n        }\n    }\n    // the following is to  what we are goint to change the following to\n    updateFollowing = async (username: string, following: boolean) => {\n        this.loading = true;\n        try {\n            await agent.Profiles.updateFollowing(username);\n            store.activityStore.updateAttendeeFollowing(username);\n            runInAction(() => {\n                if (this.profile && this.profile.username !== store.userStore.user?.username && this.profile.username === username) {\n                    following ? this.profile.followersCount++ : this.profile.followersCount--;\n                    this.profile.following = !this.profile.following;\n                }\n                 if (this.profile && this.profile.username === store.userStore.user?.username) {\n                    following ? this.profile.followingCount++ : this.profile.followingCount--;\n                } \n                this.followings.forEach(profile => {\n                    if (profile.username === username) {\n                        profile.following ? profile.followersCount-- : profile.followersCount++;\n                        profile.following = !profile.following;\n                    }\n                })\n                this.loading = false;\n            })\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loading = false);\n        }\n    }\n\n    loadFollowings = async (predicate: string) => {\n        this.loadingFollowings = true;\n        try {\n            const followings = await agent.Profiles.listFollowings(this.profile!.username, predicate);\n            runInAction(() => {\n                this.followings = followings;\n                this.loadingFollowings = false;\n            })\n        } catch (error) {\n            runInAction(() => this.loadingFollowings = false);\n        }\n    }\n    loadUserActivities = async (username: string, predicate? : string) =>{\n        this.loadingActivities = true;\n        try {\n            const activities = await agent.Profiles.listUserActivities(username, predicate!);\n            runInAction(() => {\n                this.userActivities = activities;\n                this.loadingActivities = false;\n            });\n        } catch (error) {\n            console.log(error);\n            runInAction(() => this.loadingActivities = false);\n            \n        }\n    }\n}","import { makeAutoObservable, runInAction } from \"mobx\";\nimport { history } from \"../..\";\nimport agent from \"../api/agent\";\nimport { User, UserFormValues } from \"../models/user\";\nimport { store } from \"./store\";\n\nexport default class UserStore{\n    user: User | null = null;\n    constructor(){\n        makeAutoObservable(this);\n    }\n    get isLoggedIn(){\n        return !!this.user;\n    }\n    login = async (cred: UserFormValues) =>{\n        try{\n            const user = await agent.Account.login(cred);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user );// because this is the observable\n            history.push('/activities');\n            store.modalStore.closeModal();\n            console.log(user);\n        }catch(error){\n            throw error;\n        };\n    }\n    logout = () => {\n        store.commonStore.setToken(null);\n        this.user = null;\n        history.push('/');\n    }\n    getUser = async () => {\n        try {\n            const user = await agent.Account.current();\n            runInAction(() => this.user = user);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n    register = async (creds: UserFormValues) => {\n        try {\n            const user = await agent.Account.register(creds);\n            store.commonStore.setToken(user.token);\n            runInAction(() => this.user = user);\n            history.push('/activities');\n            store.modalStore.closeModal();\n        } catch (error) {\n            throw error;\n        }\n    }\n    setImage = (image: string) => {\n        if (this.user) this.user.image = image;\n    } \n}","import { createContext, useContext } from \"react\";\nimport ActivityStore from \"./activityStore\";\nimport CommentStore from \"./commentStore\";\nimport CommonStore from \"./commonStore\";\nimport ModalStore from \"./modalStore\";\nimport ProfileStore from \"./profileStore\";\nimport UserStore from \"./userStore\";\n\ninterface Store{\n    activityStore: ActivityStore;\n    commonStore: CommonStore;\n    userStore: UserStore;\n    modalStore : ModalStore;\n    profileStore : ProfileStore;\n    commentStore: CommentStore;\n}\n// her we add all the store\nexport const store: Store = {\n    activityStore: new ActivityStore(),\n    commonStore: new CommonStore(),\n    userStore: new UserStore(),\n    modalStore: new ModalStore(),\n    profileStore : new ProfileStore(),\n    commentStore: new CommentStore()\n}\n// and from the react context we can access our stores\nexport const StoreContext = createContext(store);\n\nexport function useStore(){\n    return useContext(StoreContext);\n}","import { makeAutoObservable, reaction } from \"mobx\";\nimport { ServerError } from \"../models/serverError\";\n\nexport default class CommonStore {\n    error: ServerError | null = null;\n    token :string | null= window.localStorage.getItem('jwt');\n    appLoaded = false;\n    constructor() {\n        makeAutoObservable(this);\n        reaction(\n            () =>this.token, // what do we want react to\n            token =>{\n                if (token) {\n                    window.localStorage.setItem('jwt', token)\n                } else {\n                    window.localStorage.removeItem('jwt')\n                }\n            }\n        );\n    }\n\n    setServerError = (error: ServerError) => {\n        this.error = error;\n    }\n    setToken = (token:string|null) =>{\n        this.token =token;\n    }\n    setAppLoaded = () => {\n        this.appLoaded = true;\n    }\n} ","import { makeAutoObservable } from \"mobx\"\n\ninterface Modal {\n    open: boolean;\n    body: JSX.Element | null;\n}\n\nexport default class ModalStore {\n    modal: Modal = {\n        open: false,\n        body: null\n    }\n\n    constructor() {\n        makeAutoObservable(this)\n    }\n\n    openModal = (content: JSX.Element) => {\n        this.modal.open = true;\n        this.modal.body = content;\n    }\n\n    closeModal = () => {\n        this.modal.open = false;\n        this.modal.body = null;\n    }\n} ","import { HubConnection, HubConnectionBuilder, LogLevel } from \"@microsoft/signalr\";\nimport { makeAutoObservable, runInAction } from \"mobx\";\nimport { ChatComment } from \"../models/comment\";\nimport { store } from \"./store\";\n\nexport default class CommentStore {\n    comments: ChatComment[] = [];\n    hubConnection: HubConnection | null = null;\n\n    constructor() {\n        makeAutoObservable(this);\n    }\n\n    createHubConnection = (activityId: string) => {\n        if (store.activityStore.selectedActivity) {\n            this.hubConnection = new HubConnectionBuilder()\n                .withUrl(process.env.REACT_APP_CHAT_URL + '?activityId=' + activityId, {\n                    accessTokenFactory: () => store.userStore.user?.token!\n                })\n                .withAutomaticReconnect()\n                .configureLogging(LogLevel.Information)\n                .build();\n\n            this.hubConnection.start().catch(error => console.log('Error establishing the connection: ', error));\n\n            this.hubConnection.on('LoadComments', (comments: ChatComment[]) => {\n                runInAction(() => {\n                    comments.forEach(comment => {\n                        comment.createdAt = new Date(comment.createdAt + 'Z');\n                    })\n                    this.comments = comments\n                });\n            })\n\n            this.hubConnection.on('ReceiveComment', (comment: ChatComment) => {\n                runInAction(() => {\n                    comment.createdAt = new Date(comment.createdAt);\n                    this.comments.unshift(comment);// insted of pushing the comment we can add it at the beginning\n                });\n            })\n        }\n    }\n\n    stopHubConnection = () => {\n        this.hubConnection?.stop().catch(error => console.log('Error stopping connection: ', error));\n    }\n\n    clearComments = () => {\n        this.comments = [];\n        this.stopHubConnection();\n    }\n\n    addComment = async (values: any) => {\n        values.activityId = store.activityStore.selectedActivity?.id;\n        try {\n            await this.hubConnection?.invoke('SendComment', values);\n        } catch (error) {\n            console.log(error);\n        }\n    }\n} ","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link, NavLink } from \"react-router-dom\";\nimport { Button, Container, Menu, Image, Dropdown } from \"semantic-ui-react\";\nimport { useStore } from \"../stores/store\";\n\n// a compent is a function that return jsx\n\nexport default observer(function NavBar(){\n    const { userStore: { user, logout } } = useStore();\n    return(\n        <Menu inverted fixed='top'>\n            <Container>\n                <Menu.Item as={NavLink} to='/' exact header>\n                    <img src=\"/assets/logo.png \" alt=\"logo\" style={{marginRight: 10}}/>\n                </Menu.Item>\n                <Menu.Item as={NavLink} to='/activities' name=\"Activities\" />\n                <Menu.Item as={NavLink} to='/errors' name=\"Errors\" />\n                <Menu.Item >\n                    <Button as={NavLink} to='/createActivity' positive content=\"Create Activity\" />\n                </Menu.Item>\n                <Menu.Item position='right'>\n                    <Image src={user?.image || '/assets/user.png'} avatar spaced='right' />\n                    <Dropdown pointing='top left' text={user?.displayName}>\n                        <Dropdown.Menu>\n                            <Dropdown.Item as={Link} to={`/profiles/${user?.username}`} \n                                text='My Profile' icon='user' />\n                            <Dropdown.Item onClick={logout} text='Logout' icon='power' />\n                        </Dropdown.Menu>\n                    </Dropdown>\n                </Menu.Item>\n            </Container>\n        </Menu>\n    )\n})","import React from 'react';\nimport Calendar from 'react-calendar';\nimport { Header, Menu } from 'semantic-ui-react';\nimport { useStore } from '../../../app/stores/store';\n\nexport default function ActivityFilters() {\n    const {activityStore: {predicate, setPredicate}} = useStore();\n    return (\n        <>\n            <Menu vertical size='large' style={{ width: '100%', marginTop: 25 }}>\n                <Header icon='filter' attached color='teal' content='Filters' />\n                <Menu.Item \n                    content='All Activites' \n                    active={predicate.has('all')}\n                    onClick={() => setPredicate('all', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm going\" \n                    active={predicate.has('isGoing')}\n                    onClick={() => setPredicate('isGoing', 'true')}\n                />\n                <Menu.Item \n                    content=\"I'm hosting\" \n                    active={predicate.has('isHost')}\n                    onClick={() => setPredicate('isHost', 'true')}    \n                />\n            </Menu>\n            <Header />\n            <Calendar \n                onChange={(date : Date) => setPredicate('startDate', date as Date)}\n                value={predicate.get('startDate') || new Date()}\n            />\n        </>\n    )\n} ","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent } from 'react';\nimport { Reveal, Button } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function FollowButton({ profile }: Props) {\n    const {profileStore, userStore} = useStore();\n    const {updateFollowing, loading} = profileStore;\n\n    if (userStore.user?.username === profile.username) return null;\n\n    function handleFollow(e: SyntheticEvent, username: string) {\n        e.preventDefault();\n        profile.following ? updateFollowing(username, false) : updateFollowing(username, true);\n    }\n\n    return (\n        <Reveal animated='move'>\n            <Reveal.Content visible style={{ width: '100%' }}>\n                <Button \n                    fluid \n                    color='teal' \n                    content={profile.following ? 'Following' : 'Not following'} />\n            </Reveal.Content>\n            <Reveal.Content hidden style={{ width: '100%' }}>\n                <Button\n                    fluid\n                    basic\n                    color={profile.following ? 'red' : 'green'}\n                    content={profile.following ? 'Unfollow' : 'Follow'}\n                    loading={loading}\n                    onClick={(e) => handleFollow(e, profile.username)}\n                />\n            </Reveal.Content>\n        </Reveal>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Card, Icon, Image } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileCard({profile}: Props) {\n    return (\n        <Card as={Link} to={`/profiles/${profile.username}`}>\n            <Image src={profile.image || '/assets/user.png'} />\n            <Card.Content>\n                <Card.Header>{profile.displayName}</Card.Header>\n                <Card.Description>Bio goes here</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <Icon name='user' />\n                {profile.followersCount} followers\n            </Card.Content>\n            <FollowButton profile={profile}/>\n\n        </Card>\n    )\n}) ","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Image, List, Popup } from 'semantic-ui-react';\nimport { Profile } from '../../../app/models/profile';\nimport ProfileCard from '../../profiles/ProfileCard';\n\ninterface Props {\n    attendees: Profile[];\n}\n\nexport default observer(function ActivityListItemAttendee({ attendees }: Props) {\n    const styles = {\n        borderColor: 'orange',\n        borderWidth: 2\n    }\n    return (\n        <List horizontal>\n            {attendees.map(attendee => (\n                <Popup\n                    hoverable\n                    key={attendee.username}\n                    trigger={\n                        <List.Item key={attendee.username} as={Link} to={`/profiles/${attendee.username}`}>\n                            <Image \n                                size='mini'\n                                circular src={attendee.image || '/assets/user.png'}\n                                bordered\n                                style={attendee.following ? styles : null} />\n                        </List.Item>\n                    }\n                >\n                    <Popup.Content>\n                        <ProfileCard profile={attendee} />\n                    </Popup.Content>\n                </Popup>\n\n            ))}\n        </List>\n    )\n}) ","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Icon, Item, Label, Segment } from 'semantic-ui-react';\nimport { Activity } from '../../../app/models/activity';\nimport {format} from 'date-fns';\nimport ActivityListItemAttendee from './ActivityListItemAttendee';\ninterface Props {\n    activity: Activity\n}\n\nexport default function ActivityListItem({ activity }: Props) {\n\n    return (\n        <Segment.Group>\n            <Segment>\n            {activity.isCancelled &&\n                    <Label attached='top' color='red' content='Cancelled' style={{textAlign: 'center'}} />\n                }\n                <Item.Group>\n                    <Item>\n                        <Item.Image style={{marginBottom: 3}} size='tiny' circular src={activity.host?.image || '/assets/user.png'} />\n                        <Item.Content>\n                            <Item.Header as={Link} to={`/activities/${activity.id}`}>\n                                {activity.title}\n                            </Item.Header>\n                            <Item.Description>Hosted by <Link to={`/profiles/${activity.hostUsername}`}>{activity.host?.displayName}</Link></Item.Description>\n                            {activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='orange'>\n                                        You are hosting this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                            {activity.isGoing && !activity.isHost && (\n                                <Item.Description>\n                                    <Label basic color='green'>\n                                        You are going to this activity\n                                    </Label>\n                                </Item.Description>\n                            )}\n                        </Item.Content>\n                    </Item>\n                </Item.Group>\n            </Segment>\n            <Segment>\n                <span>\n                    <Icon name='clock' /> {format(activity.date!,'dd MMM yyyy h:mm aa')}\n                    <Icon name='marker' /> {activity.venue}\n                </span>\n            </Segment>\n            <Segment secondary>\n                <ActivityListItemAttendee attendees={activity.attendees!}/>\n            </Segment>\n            <Segment clearing>\n                <span>{activity.description}</span>\n                <Button \n                    as={Link}\n                    to={`/activities/${activity.id}`}\n                    color='teal'\n                    floated='right'\n                    content='View'\n                />\n            </Segment>\n        </Segment.Group>\n    )\n} ","import { observer } from \"mobx-react-lite\";\nimport React, { Fragment } from \"react\";\nimport {  Header } from \"semantic-ui-react\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityListItem from \"./ActivityListItem\";\n\nexport default observer( function ActivityList(){\n    const {activityStore} = useStore();\n    const {groupedActivities} = activityStore;\n    \n\n    return(\n        <>\n        {groupedActivities.map(([group, activities]) => (\n            <Fragment key={group}>\n                <Header sub color='teal'>\n                    {group}\n                </Header>\n                {activities.map(activity => (\n                    <ActivityListItem key={activity.id} activity={activity} />\n                ))}\n            </Fragment>\n        ))}\n    </>\n    )\n})","import React, { Fragment } from 'react';\nimport { Segment, Button, Placeholder } from 'semantic-ui-react';\n\nexport default function ActivityListItemPlaceholder() {\n    return (\n        <Fragment>\n            <Placeholder fluid style={{ marginTop: 25 }}>\n                <Segment.Group>\n                    <Segment style={{ minHeight: 110 }}>\n                        <Placeholder>\n                            <Placeholder.Header image>\n                                <Placeholder.Line />\n                                <Placeholder.Line />\n                            </Placeholder.Header>\n                            <Placeholder.Paragraph>\n                                <Placeholder.Line />\n                            </Placeholder.Paragraph>\n                        </Placeholder>\n                    </Segment>\n                    <Segment>\n                        <Placeholder>\n                            <Placeholder.Line />\n                            <Placeholder.Line />\n                        </Placeholder>\n                    </Segment>\n                    <Segment secondary style={{ minHeight: 70 }} />\n                    <Segment clearing>\n                        <Button disabled color='blue' floated='right' content='View' />\n                    </Segment>\n                </Segment.Group>\n            </Placeholder>\n        </Fragment>\n    );\n}; ","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect, useState } from \"react\";\nimport InfiniteScroll from \"react-infinite-scroller\";\nimport { Grid, Loader } from \"semantic-ui-react\";\nimport { PagingParams } from \"../../../app/models/pagination\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityFilters from \"./ActivityFilter\";\nimport ActivityList from \"./ActivityList\";\nimport ActivityListItemPlaceholder from \"./ActivityListItemPlaceholder\";\n\nexport default observer(function ActivityDashboard(){\n    const {activityStore} = useStore(); // we destructure thr object to take just the part we are interested in\n    const {loadActivities, activityRegistry, loadingInitial, setPagingParams, pagination} = activityStore;\n    const [loadingNext, setLoadingNext] = useState(false);\n\n    function handleGetNext(){\n        setLoadingNext(true);\n        setPagingParams(new PagingParams(pagination!.currentPage + 1 ));\n        loadActivities()\n        .then(() => setLoadingNext(false));\n    }\n\n\n    // since we have added our typesctipt obj we can add the generic in use state\n    // <Type>(initialValue)\n\n    useEffect(() => {\n        if (activityRegistry.size <= 1) loadActivities();\n    }, [activityRegistry.size, loadActivities])// we have added the dependecies list because otherwise is going to run constantly\n    // every time something is changing in the component there is going to be a re render\n    // and when we have a rerender we are going to call the useEffect methot and it's going to be a loop\n\n    // when we create oo modify an activity we call this function, we have decided to stre it here \n    // because it's also where we have the list of activities\n\n\n    return(\n        <Grid>\n            <Grid.Column width='10'>\n            { loadingInitial && !loadingNext ?\n            <>\n                <ActivityListItemPlaceholder />\n                <ActivityListItemPlaceholder />\n            </>\n            : \n            <InfiniteScroll\n                pageStart={0}\n                loadMore={handleGetNext}\n                hasMore={!loadingNext && !!pagination && pagination.currentPage < pagination.totalPages}\n                initialLoad={false}\n            >\n                <ActivityList />\n            </InfiniteScroll>}\n            </Grid.Column>\n            <Grid.Column width='6'>\n                <ActivityFilters/>                \n            </Grid.Column>\n            <Grid.Column width={10}>\n                <Loader active={loadingNext} />\n            </Grid.Column>\n        </Grid>\n    )\n})","import React from \"react\";\n\nimport { Dimmer, Loader } from 'semantic-ui-react';\n\ninterface Props {\n    inverted?: boolean;\n    content?: string;\n}\n\nexport default function LoadingComponent({inverted = true, content = 'Loading...'}: Props) {\n    return (\n        <Dimmer active={true} inverted={inverted}>\n            <Loader content={content} />\n        </Dimmer>\n    )\n} ","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    label?: string;\n    type?: string;\n}\n\nexport default function MyTextInput(props: Props) {\n    const [field, meta] = useField(props.name); \n    return (\n        // !! it make it boolean\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <input {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n} ","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    rows: number;\n    label?: string;\n}\n\nexport default function MyTextArea(props: Props) {\n    const [field, meta] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <textarea {...field} {...props} />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n} ","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label, Select } from 'semantic-ui-react';\n\ninterface Props {\n    placeholder: string;\n    name: string;\n    options: any;\n    label?: string;\n}\n\nexport default function MySelectInput(props: Props) {\n    const [field, meta, helpers] = useField(props.name); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <label>{props.label}</label>\n            <Select \n                clearable\n                options={props.options}\n                value={field.value || null}\n                onChange={(e, d) => helpers.setValue(d.value)}\n                onBlur={() => helpers.setTouched(true)}\n                placeholder={props.placeholder}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n} ","export const categoryOptions = [\n    {text: 'Drinks', value: 'drinks'},\n    {text: 'Culture', value: 'culture'},\n    {text: 'Film', value: 'film'},\n    {text: 'Food', value: 'food'},\n    {text: 'Music', value: 'music'},\n    {text: 'Travel', value: 'travel'},\n] ","import { useField } from 'formik';\nimport React from 'react';\nimport { Form, Label } from 'semantic-ui-react';\nimport DatePicker, {ReactDatePickerProps} from 'react-datepicker';\n// to make all the properties optionals\nexport default function MyDateInput(props: Partial<ReactDatePickerProps>) {\n    const [field, meta, helpers] = useField(props.name!); \n    return (\n        <Form.Field error={meta.touched && !!meta.error}>\n            <DatePicker \n                {...field}\n                {...props}\n                selected={(field.value && new Date(field.value)) || null}\n                onChange={value => helpers.setValue(value)}\n            />\n            {meta.touched && meta.error ? (\n                <Label basic color='red'>{meta.error}</Label>\n            ) : null}\n        </Form.Field>\n    )\n} ","import { observer } from \"mobx-react-lite\";\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router\";\nimport { Button, Header, Segment } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\nimport { useStore } from \"../../../app/stores/store\";\nimport {v4 as uuid} from 'uuid'\nimport { Link, useHistory } from \"react-router-dom\";\nimport { Formik, Form } from 'formik';\nimport * as Yup from 'yup';\nimport MyTextInput from \"../../../app/common/form/MyTextInput\";\nimport MyTextArea from \"../../../app/common/form/MyTextArea\";\nimport MySelectInput from \"../../../app/common/form/MySelectinput\";\nimport { categoryOptions } from \"../../../app/common/options/categoryOptions\";\nimport MyDateInput from \"../../../app/common/form/MyDateInput\";\nimport { ActivityFormValues } from \"../../../app/models/activity\";\n\nexport default observer(function ActivityForm() {\n    const {activityStore} = useStore();\n    const history = useHistory();\n    const { updateActivity, createActivity, loadActivity, loadingInitial} = activityStore;\n    const {id} = useParams<{id : string}>();\n    const [activity, setActivity] = useState<ActivityFormValues>(new ActivityFormValues());\n    const validationSchema = Yup.object({\n        title: Yup.string().required('the activity title is required'),\n        description: Yup.string().required('the activity description is required'),\n        category: Yup.string().required(),\n        date: Yup.string().required('Date is required').nullable(),\n        city: Yup.string().required(),\n        venue: Yup.string().required()\n    })\n    useEffect(() =>{\n        if(id) loadActivity(id).then(activity => setActivity(new ActivityFormValues(activity!)))\n    }, [id, loadActivity]);\n\n    function handleFormSubmit(activity: ActivityFormValues){\n        if (!activity.id) {\n            let newActivity = {\n                ...activity,\n                id: uuid()\n            };\n            createActivity(newActivity).then(() => history.push(`/activities/${newActivity.id}`))\n        } else {\n            updateActivity(activity).then(() => history.push(`/activities/${activity.id}`))\n        }\n    }\n  \n    if(loadingInitial) return <LoadingComponent content=\"Loading activity ...\"/>\n    return (\n        <Segment clearing>\n            <Header content='Activity Details' sub color='teal' />\n            <Formik \n            enableReinitialize\n            initialValues={activity}\n            onSubmit={values => handleFormSubmit(values)}\n            validationSchema={validationSchema}>\n            {({isValid, isSubmitting, dirty, handleSubmit}) => (\n            <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\n                <MyTextInput placeholder='Title' name='title' />\n                \n                <MyTextArea rows={3} placeholder='Description' name='description' />\n                <MySelectInput options={categoryOptions} placeholder='Category' name='category' />\n                <MyDateInput\n                    placeholderText='Date'  \n                    name='date' \n                    showTimeSelect\n                    timeCaption='time'\n                    dateFormat='MMMM d, yyyy h:mm aa'\n                />\n                <Header content='Locations Details' subheader color='teal' />\n                <MyTextInput placeholder='City' name='city'/>\n                <MyTextInput placeholder='Venue' name='venue'/>\n                <Button \n                    disabled={isSubmitting || !dirty || !isValid }\n                    loading={isSubmitting} floated='right' positive type='submit' content='Submit'/>\n                <Button as={Link} to=\"/activities\" floated='right' type='button' content='Cancel'/>\n            </Form>\n            )}\n            </Formik>\n            \n        </Segment>\n    )\n} )","import { ErrorMessage, Form, Formik } from \"formik\";\nimport { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Button, Header, Label } from \"semantic-ui-react\";\nimport MyTextInput from \"../../app/common/form/MyTextInput\";\nimport { useStore } from \"../../app/stores/store\";\n\n export default observer(function LoginForm(){\n     const {userStore} = useStore();\n     return(\n         <Formik\n            initialValues={{email:'', password:'', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.login(values).catch(error =>\n                setErrors({error : 'Invalid email or password'}))}\n         >\n             {({handleSubmit, isSubmitting, errors})  => (\n                 <Form className='ui form' onSubmit={handleSubmit}>\n                    <Header as='h2' content='Login to Reactivites' color='teal' textAlign='center' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => \n                        <Label style={{marginBottom: 10}} basic color='red' content={errors.error}/>}\n                    />\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\n                 </Form>\n             )}\n         </Formik>\n     )\n })","import React from 'react';\nimport { Message } from 'semantic-ui-react';\n\ninterface Props {\n    errors: any;\n}\n\nexport default function ValidationErrors({errors}: Props) {\n    return (\n        <Message error>\n            {errors && (\n                <Message.List>\n                    {errors.map((err: any, i:any) => (\n                        <Message.Item key={i}>{err}</Message.Item>\n                    ))}\n                </Message.List>\n            )}\n        </Message>\n    )\n} ","import { ErrorMessage, Form, Formik } from 'formik';\nimport { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Button, Header } from 'semantic-ui-react';\nimport MyTextInput from '../../app/common/form/MyTextInput';\nimport { useStore } from '../../app/stores/store';\nimport * as Yup from 'yup';\nimport ValidationErrors from '../errors/ValidationErrors';\n\nexport default observer(function RegisterForm() {\n    const {userStore} = useStore();\n    return (\n        <Formik\n            initialValues={{displayName: '', username: '', email: '', password: '', error: null}}\n            onSubmit={(values, {setErrors}) => userStore.register(values).catch(error => \n                setErrors({error}))}\n            validationSchema={Yup.object({\n                displayName: Yup.string().required(),\n                username: Yup.string().required(),\n                email: Yup.string().required().email(),\n                password: Yup.string().required(),\n            })}\n        >\n            {({handleSubmit, isSubmitting, errors, isValid, dirty}) => (\n                <Form className='ui form error' onSubmit={handleSubmit} autoComplete='off'>\n                    <Header as='h2' content='Sign up to Reactivites' color='teal' textAlign='center' />\n                    <MyTextInput name='displayName' placeholder='Display Name' />\n                    <MyTextInput name='username' placeholder='Username' />\n                    <MyTextInput name='email' placeholder='Email' />\n                    <MyTextInput name='password' placeholder='Password' type='password' />\n                    <ErrorMessage \n                        name='error' render={() => \n                        <ValidationErrors errors={errors.error}/>}\n                    />\n                    <Button disabled={!isValid || !dirty || isSubmitting} \n                        loading={isSubmitting} positive content='Register' type='submit' fluid />\n                </Form>\n            )}\n        </Formik>\n    )\n}) ","import { observer } from \"mobx-react-lite\";\nimport React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Button, Container, Header, Segment, Image } from \"semantic-ui-react\";\nimport { useStore } from \"../../app/stores/store\";\nimport LoginForm from \"../users/LoginForm\";\nimport RegisterForm from \"../users/RegisterForm\";\n\nexport default observer(function HomePage(){\n    const {userStore, modalStore} = useStore();\n    return (\n        <Segment inverted textAlign='center' vertical className='masthead'>\n        <Container text>\n            <Header as='h1' inverted>\n                <Image size='massive' src='/assets/logo.png' alt='logo' style={{marginBottom: 12}} />\n                Reactivities\n            </Header>\n            {userStore.isLoggedIn ? (\n                    <>\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\n                        <Button as={Link} to='/activities' size='huge' inverted>\n                            Go to Activities!\n                        </Button>\n                    </>\n\n                ) : (\n                        <>\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\n                                    Login!\n                            </Button>\n                                <Button onClick={() => modalStore.openModal(<RegisterForm />)} size='huge' inverted>\n                                    Register!\n                            </Button>\n                        </>\n\n                    )}\n        </Container>\n    </Segment>\n    )\n})","import { Formik, Form, Field, FieldProps } from 'formik'\nimport { observer } from 'mobx-react-lite'\nimport React, { useEffect } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Segment, Header, Comment, Loader } from 'semantic-ui-react'\nimport { useStore } from '../../../app/stores/store';\nimport * as Yup from 'yup';\nimport { formatDistanceToNow } from 'date-fns'\n\ninterface Props {\n    activityId: string;\n}\n\nexport default observer(function ActivityDetailedChat({ activityId }: Props) {\n    const { commentStore } = useStore();\n\n    useEffect(() => {\n        if (activityId) {\n            commentStore.createHubConnection(activityId);\n        }\n        return () => {\n            commentStore.clearComments();\n        }\n    }, [commentStore, activityId]);\n\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                attached='top'\n                inverted\n                color='teal'\n                style={{ border: 'none' }}\n            >\n                <Header>Chat about this event</Header>\n            </Segment>\n            <Segment attached clearing>\n                <Formik\n                    onSubmit={(values, { resetForm }) =>\n                        commentStore.addComment(values).then(() => resetForm())}\n                    initialValues={{ body: '' }}\n                    validationSchema={Yup.object({\n                        body: Yup.string().required()\n                    })}\n                >\n                    {({ isSubmitting, isValid, handleSubmit }) => (\n                        <Form className='ui form'>\n                            <Field name='body'>\n                                {(props: FieldProps) => (\n                                    <div style={{ position: 'relative' }}>\n                                        <Loader active={isSubmitting} />\n                                        <textarea\n                                            placeholder='Enter your comment (Enter to submit, SHIFT + enter for new line)'\n                                            rows={2}\n                                            {...props.field}\n                                            onKeyPress={e => {\n                                                if (e.key === 'Enter' && e.shiftKey) {\n                                                    return;\n                                                }\n                                                if (e.key === 'Enter' && !e.shiftKey) {\n                                                    e.preventDefault();\n                                                    isValid && handleSubmit();\n                                                }\n                                            }}\n                                        />\n                                    </div>\n                                )}\n                            </Field>\n                        </Form>\n                    )}\n                </Formik>\n                <Comment.Group>\n                    {commentStore.comments.map(comment => (\n                        <Comment key={comment.id}>\n                            <Comment.Avatar src={comment.image || '/assets/user.png'} />\n                            <Comment.Content>\n                                <Comment.Author as={Link} to={`/profiles/${comment.username}`}>\n                                    {comment.displayName}\n                                </Comment.Author>\n                                <Comment.Metadata>\n                                    <div>{formatDistanceToNow(new Date(comment.createdAt))} ago</div>\n                                </Comment.Metadata>\n                                <Comment.Text style={{ whiteSpace: 'pre-wrap' }}>{comment.body}</Comment.Text>\n                            </Comment.Content>\n                        </Comment>\n                    ))}\n                </Comment.Group>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Segment, Grid, Icon } from 'semantic-ui-react'\nimport { Activity } from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer(function ActivityDetailedInfo({ activity }: Props) {\n    return (\n        <Segment.Group>\n            <Segment attached='top'>\n                <Grid>\n                    <Grid.Column width={1}>\n                        <Icon size='large' color='teal' name='info' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <p>{activity.description}</p>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='calendar' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={15}>\n                        <span>\n                            {format(activity.date!,'dd MMM yyyy h:mm aa')}\n                        </span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n            <Segment attached>\n                <Grid verticalAlign='middle'>\n                    <Grid.Column width={1}>\n                        <Icon name='marker' size='large' color='teal' />\n                    </Grid.Column>\n                    <Grid.Column width={11}>\n                        <span>{activity.venue}, {activity.city}</span>\n                    </Grid.Column>\n                </Grid>\n            </Segment>\n        </Segment.Group>\n    )\n}) ","import React from 'react'\nimport { Segment, List, Label, Item, Image } from 'semantic-ui-react'\nimport { Link } from 'react-router-dom'\nimport { observer } from 'mobx-react-lite'\nimport { Activity } from '../../../app/models/activity'\ninterface Props{\n    activity: Activity;\n}\nexport default observer(function ActivityDetailedSidebar ({activity: {attendees, host}}: Props) {\n    if (!attendees) return null;\n    return (\n        <>\n            <Segment\n                textAlign='center'\n                style={{ border: 'none' }}\n                attached='top'\n                secondary\n                inverted\n                color='teal'\n            >\n                {attendees.length} {attendees.length === 1 ? 'Person' : 'People'} going\n\n            </Segment>\n            <Segment attached>\n                <List relaxed divided>\n                    {attendees.map(attendee => (\n                        <Item key={attendee.username} style={{ position: 'relative' }}>\n                            {attendee.username === host?.username &&\n                                <Label\n                                    style={{ position: 'absolute' }}\n                                    color='orange'\n                                    ribbon='right'\n                                >\n                                    Host\n                                </Label>\n                            }\n\n                            <Image size='tiny' src={attendee.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Item.Header as='h3'>\n                                    <Link to={`/profiles/${attendee.username}`}>{attendee.displayName}</Link>\n                                </Item.Header>\n                                {attendee.following &&\n                                <Item.Extra style={{ color: 'orange' }}>Following</Item.Extra>\n                                }\n                            </Item.Content>\n                        </Item>\n                    ))}\n                    \n                </List>\n            </Segment>\n        </>\n\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react'\nimport { Link } from 'react-router-dom';\nimport {Button, Header, Item, Segment, Image, Label} from 'semantic-ui-react'\nimport {Activity} from \"../../../app/models/activity\";\nimport {format} from 'date-fns';\nimport { useStore } from '../../../app/stores/store';\n\nconst activityImageStyle = {\n    filter: 'brightness(30%)'\n};\n\nconst activityImageTextStyle = {\n    position: 'absolute',\n    bottom: '5%',\n    left: '5%',\n    width: '100%',\n    height: 'auto',\n    color: 'white'\n};\n\ninterface Props {\n    activity: Activity\n}\n\nexport default observer (function ActivityDetailedHeader({activity}: Props) {\n    const { activityStore: { updateAttendance, loading, cancelActivityToggle } } = useStore();\n    return (\n        <Segment.Group>\n            <Segment basic attached='top' style={{padding: '0'}}>\n            {\n            activity.isCancelled &&\n                    <Label style={{ position: 'absolute', zIndex: 1000, left: -14, top: 20 }}\n                        ribbon color='red' content='Cancelled' />\n                }\n                <Image src={`/assets/categoryImages/${activity.category}.jpg`} fluid style={activityImageStyle}/>\n                <Segment style={activityImageTextStyle} basic>\n                    <Item.Group>\n                        <Item>\n                            <Item.Content>\n                                <Header\n                                    size='huge'\n                                    content={activity.title}\n                                    style={{color: 'white'}}\n                                />\n                                <p>{format(activity.date!,'dd MMM yyyy')}</p>\n                                <p>\n                                    Hosted by <strong><Link to={`/profiles/${activity.host?.displayName}`}>{activity.host?.displayName}</Link></strong>\n                                </p>\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Segment>\n            </Segment>\n            <Segment clearing attached='bottom'>\n            {activity.isHost ? (\n                    <>\n                        <Button\n                            color={activity.isCancelled ? 'green' : 'red'}\n                            floated='left'\n                            basic\n                            content={activity.isCancelled ? 'Re-activate Activity' : 'Cancel Activity'}\n                            onClick={cancelActivityToggle}\n                            loading={loading}\n                        />\n                        <Button as={Link}\n                            disabled={activity.isCancelled}\n                            to={`/manage/${activity.id}`}\n                            color='orange'\n                            floated='right'>\n                            Manage Event\n                        </Button>\n                    </>\n\n                ) : activity.isGoing ? (\n                    <Button  loading={loading} onClick={updateAttendance} >Cancel attendance</Button>\n                ) : (\n                    <Button  disabled={activity.isCancelled}\n                        loading={loading} onClick={updateAttendance}  color='teal'>\n                            Join Activity\n                    </Button>\n                )}\n            </Segment>\n        </Segment.Group>\n    )\n})","import { observer } from \"mobx-react-lite\";\nimport React, { useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport {  Grid } from \"semantic-ui-react\";\nimport LoadingComponent from \"../../../app/layout/LoadingComponents\";\nimport { useStore } from \"../../../app/stores/store\";\nimport ActivityDetailedChat from \"./ActivityDetailedChat\";\nimport ActivityDetailedInfo from \"./ActivityDetailedInfo\";\nimport ActivityDetailedSidebar from \"./ActivityDetailedSidebar\";\nimport ActivityDetailedHeader from './ActivityDetaledHeader';\n\n\nexport default observer(function ActivityDetails() {\n    const {activityStore} = useStore();\n    const {selectedActivity: activity, loadActivity, loadingInitial, clearSelectedActivity} = activityStore;\n    const { id } = useParams<{id : string}>();\n    useEffect(() => {\n        if (id) loadActivity(id)\n        return () => clearSelectedActivity();\n    }, [id, loadActivity, clearSelectedActivity]);\n    if(loadingInitial || !activity) return <LoadingComponent /> // we already check in activity dashboard but, we need to remove the error\n    return (\n        <Grid>\n        <Grid.Column width={10}>\n            <ActivityDetailedHeader activity={activity} />\n            <ActivityDetailedInfo activity={activity} />\n            <ActivityDetailedChat activityId={activity.id} />\n        </Grid.Column>\n        <Grid.Column width={6}>\n            <ActivityDetailedSidebar activity={activity} />\n        </Grid.Column>\n    </Grid>\n    )\n} )","import React, { useState } from 'react';\nimport {Button, Header, Segment} from \"semantic-ui-react\";\nimport axios from 'axios';\nimport ValidationErrors from './ValidationErrors';\n\nexport default function TestErrors() {\n    const baseUrl = process.env.REACT_APP_API_URL;\n\n    const [errors, setErrors] = useState(null);\n\n    function handleNotFound() {\n        axios.get(baseUrl + 'buggy/not-found').catch(err => console.log(err.response));\n    }\n\n    function handleBadRequest() {\n        axios.get(baseUrl + 'buggy/bad-request').catch(err => console.log(err.response));\n    }\n\n    function handleServerError() {\n        axios.get(baseUrl + 'buggy/server-error').catch(err => console.log(err.response));\n    }\n\n    function handleUnauthorised() {\n        axios.get(baseUrl + 'buggy/unauthorised').catch(err => console.log(err.response));\n    }\n\n    function handleBadGuid() {\n        axios.get(baseUrl + 'activities/notaguid').catch(err => console.log(err));\n    }\n\n    function handleValidationError() {\n        axios.post(baseUrl + 'activities', {}).catch(err => setErrors(err));\n    }\n\n    return (\n        <>\n            <Header as='h1' content='Test Error component' />\n            <Segment>\n                <Button.Group widths='7'>\n                    <Button onClick={handleNotFound} content='Not Found' basic primary />\n                    <Button onClick={handleBadRequest} content='Bad Request' basic primary />\n                    <Button onClick={handleValidationError} content='Validation Error' basic primary />\n                    <Button onClick={handleServerError} content='Server Error' basic primary />\n                    <Button onClick={handleUnauthorised} content='Unauthorised' basic primary />\n                    <Button onClick={handleBadGuid} content='Bad Guid' basic primary />\n                </Button.Group>\n            </Segment>\n            {errors &&\n                <ValidationErrors errors={errors} />\n            }\n\n        </>\n    )\n}","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Button, Header, Icon, Segment } from 'semantic-ui-react';\n\nexport default function NotFound() {\n    return (\n        <Segment placeholder>\n            <Header icon>\n                <Icon name='search' />\n                Oops - we've looked everywhere and could not find this.\n            </Header>\n            <Segment.Inline>\n                <Button as={Link} to='/activities' primary>\n                    Return to activities page\n                </Button>\n            </Segment.Inline>\n        </Segment>\n    )\n} ","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Container, Header, Segment } from 'semantic-ui-react';\nimport { useStore } from '../../app/stores/store';\n\nexport default observer(function ServerError() {\n    const {commonStore} = useStore();\n    return (\n        <Container>\n            <Header as='h1' content='Server Error' />\n            <Header sub as='h5' color='red' content={commonStore.error?.message} />\n            {commonStore.error?.details &&\n                <Segment>\n                    <Header as='h4' content='Stack trace' color='teal' />\n                    <code style={{marginTop: '10px'}}>{commonStore.error.details}</code>\n                </Segment>\n\n            }\n        </Container>\n    )\n})","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Modal } from 'semantic-ui-react';\nimport { useStore } from '../../stores/store';\n\nexport default observer(function ModalContainer() {\n    const {modalStore} = useStore();\n\n    return (\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\n            <Modal.Content>\n                {modalStore.modal.body}\n            </Modal.Content>\n        </Modal>\n    )\n}) ","import React, { SyntheticEvent, useEffect } from 'react';\nimport { observer } from 'mobx-react-lite';\nimport { Tab, Grid, Header, Card, Image, TabProps } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport { UserActivity } from '../../app/models/profile';\nimport { format } from 'date-fns';\nimport { useStore } from \"../../app/stores/store\";\n\nconst panes = [\n    { menuItem: 'Future Events', pane: { key: 'future' } },\n    { menuItem: 'Past Events', pane: { key: 'past' } },\n    { menuItem: 'Hosting', pane: { key: 'hosting' } }\n];\n\nexport default observer(function ProfileActivities() {\n    const { profileStore } = useStore();\n    const {\n        loadUserActivities,\n        profile,\n        loadingActivities,\n        userActivities\n    } = profileStore;\n\n    useEffect(() => {\n        loadUserActivities(profile!.username);\n    }, [loadUserActivities, profile]);\n\n    const handleTabChange = (e: SyntheticEvent, data: TabProps) => {\n        loadUserActivities(profile!.username, panes[data.activeIndex as number].pane.key);\n    };\n\n    return (\n        <Tab.Pane loading={loadingActivities}>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='calendar' content={'Activities'} />\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    <Tab\n                        panes={panes}\n                        menu={{ secondary: true, pointing: true }}\n                        onTabChange={(e, data) => handleTabChange(e, data)}\n                    />\n                    <br />\n                    <Card.Group itemsPerRow={4}>\n                        {userActivities.map((activity: UserActivity) => (\n                            <Card\n                                as={Link}\n                                to={`/activities/${activity.id}`}\n                                key={activity.id}\n                            >\n                                <Image\n                                    src={`/assets/categoryImages/${activity.category}.jpg`}\n                                    style={{ minHeight: 100, objectFit: 'cover' }}\n                                />\n                                <Card.Content>\n                                    <Card.Header textAlign='center'>{activity.title}</Card.Header>\n                                    <Card.Meta textAlign='center'>\n                                        <div>{format(new Date(activity.date), 'do LLL')}</div>\n                                        <div>{format(new Date(activity.date), 'h:mm a')}</div>\n                                    </Card.Meta>\n                                </Card.Content>\n                            </Card>\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    );\n});","import {Tab, Grid, Header, Card} from \"semantic-ui-react\";\nimport ProfileCard from \"./ProfileCard\";\nimport {useStore} from \"../../app/stores/store\";\nimport { observer } from 'mobx-react-lite';\n\nexport default observer(function ProfileFollowings() {\n    const {profileStore} = useStore();\n    const {profile, followings, loadingFollowings, activeTab} = profileStore;\n\n    \n    return (\n        <Tab.Pane loading={loadingFollowings}>\n            <Grid>\n                <Grid.Column width='16'>\n                    <Header\n                        floated='left'\n                        icon='user'\n                        content={activeTab === 3 ? `People following ${profile!.displayName}` : `People ${profile?.displayName} is following`}\n                        \n                    />\n                </Grid.Column>\n                <Grid.Column width='16'>\n                    <Card.Group itemsPerRow={4}>\n                        {followings.map(profile => (\n                            <ProfileCard key={profile.username} profile={profile} />\n                        ))}\n                    </Card.Group>\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n})","import React from 'react';\nimport { Cropper } from 'react-cropper';\nimport 'cropperjs/dist/cropper.css';\n\ninterface Props {\n    imagePreview: string;\n    setCropper: (cropper: Cropper) => void;\n}\n\nexport default function PhotoWidgetCropper({imagePreview, setCropper}: Props) {\n    return (\n        <Cropper \n            src={imagePreview}\n            style={{height: 200, width: '100%'}}\n            initialAspectRatio={1}\n            aspectRatio={1}\n            preview='.img-preview'\n            guides={false}\n            viewMode={1}\n            autoCropArea={1}\n            background={false}\n            onInitialized={cropper => setCropper(cropper)}\n        />\n    )\n} ","import React, { useCallback } from 'react'\nimport { useDropzone } from 'react-dropzone'\nimport { Header, Icon } from 'semantic-ui-react'\n\ninterface Props {\n    setFiles: (files: any) => void;\n}\n\nexport default function PhotoWidgetDropzone({setFiles}: Props) {\n    const dzStyles = {\n        border: 'dashed 3px #eee',\n        borderColor: '#eee',\n        borderRadius: '5px',\n        paddingTop: '30px',\n        textAlign: 'center' as 'center',\n        height: 200\n    }\n\n    const dzActive = {\n        borderColor: 'green'\n    }\n\n    const onDrop = useCallback(acceptedFiles => {\n        setFiles(acceptedFiles.map((file: any) => Object.assign(file, {\n            preview: URL.createObjectURL(file)\n        })))\n    }, [setFiles])\n    const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop })\n\n    return (\n        <div {...getRootProps()} style={isDragActive ? {...dzStyles, ...dzActive} : dzStyles} >\n            <input {...getInputProps()} />  \n            <Icon name='upload' size='huge' />\n            <Header content='Drop image here' />\n        </div>\n    )\n} ","import React, { useEffect, useState } from 'react';\nimport { Button, Grid, Header } from 'semantic-ui-react';\nimport PhotoWidgetCropper from './PhotoWidgetCropper';\nimport PhotoWidgetDropzone from './PhotoWidgetDropzone';\n\ninterface Props {\n    loading: boolean;\n    uploadPhoto: (file: Blob) => void;\n}\n\nexport default function PhotoUploadWidget({loading, uploadPhoto}: Props) {\n    const [files, setFiles] = useState<any>([]);\n    const [cropper, setCropper] = useState<Cropper>();\n\n    function onCrop() {\n        if (cropper) {\n            cropper.getCroppedCanvas().toBlob(blob => uploadPhoto(blob!));\n        }\n    }\n\n    useEffect(() => {\n        return () => {\n            files.forEach((file: any) => URL.revokeObjectURL(file.preview))\n        }\n    }, [files])\n\n    return (\n        <Grid>\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 1 - Add Photo' />\n                <PhotoWidgetDropzone setFiles={setFiles} />\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 2 - Resize image' />\n                {files && files.length > 0 && (\n                    <PhotoWidgetCropper setCropper={setCropper} imagePreview={files[0].preview} />\n                )}\n            </Grid.Column>\n            <Grid.Column width={1} />\n            <Grid.Column width={4}>\n                <Header sub color='teal' content='Step 3 - Preview & Upload' />\n                {files && files.length > 0 &&\n                    <>\n                        <div className='img-preview' style={{ minHeight: 200, overflow: 'hidden' }} />\n                        <Button.Group widths={2}>\n                            <Button loading={loading} onClick={onCrop} positive icon='check' />\n                            <Button disabled={loading} onClick={() => setFiles([])} icon='close' />\n                        </Button.Group>\n                    </>}\n\n            </Grid.Column>\n        </Grid>\n    )\n} ","import { observer } from 'mobx-react-lite';\nimport React, { SyntheticEvent, useState } from 'react';\nimport { Button, Card, Grid, Header, Image, Tab } from 'semantic-ui-react';\nimport PhotoUploadWidget from '../../app/common/imageUpload/PhotoUploadWidget';\nimport { Photo, Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfilePhotos({ profile }: Props) {\n    const { profileStore: { isCurrentUser, uploadPhoto, \n            uploading, loading, setMainPhoto, deletePhoto } } = useStore();\n    const [addPhotoMode, setAddPhotoMode] = useState(false);\n    const [target, setTarget] = useState('');\n\n    function handlePhotoUpload(file: Blob) {\n        uploadPhoto(file).then(() => setAddPhotoMode(false));\n    }\n\n    function handleSetMainPhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        setMainPhoto(photo);\n    }\n\n    function handleDeletePhoto(photo: Photo, e: SyntheticEvent<HTMLButtonElement>) {\n        setTarget(e.currentTarget.name);\n        deletePhoto(photo);\n    }\n\n    return (\n        <Tab.Pane>\n            <Grid>\n                <Grid.Column width={16}>\n                    <Header floated='left' icon='image' content='Photos' />\n                    {isCurrentUser && (\n                        <Button floated='right' basic\n                            content={addPhotoMode ? 'Cancel' : 'Add Photo'}\n                            onClick={() => setAddPhotoMode(!addPhotoMode)}\n                        />\n                    )}\n                </Grid.Column>\n                <Grid.Column width={16}>\n                    {addPhotoMode ? (\n                        <PhotoUploadWidget uploadPhoto={handlePhotoUpload} loading={uploading} />\n                    ) : (\n                            <Card.Group itemsPerRow={5}>\n                                {profile.photos?.map(photo => (\n                                    <Card key={photo.id}>\n                                        <Image src={photo.url} />\n                                        {isCurrentUser && (\n                                            <Button.Group fluid widths={2}>\n                                                <Button \n                                                    basic\n                                                    color='green'\n                                                    content='Main'\n                                                    name={'main' + photo.id}\n                                                    disabled={photo.isMain}\n                                                    loading={target === 'main' + photo.id && loading}\n                                                    onClick={e => handleSetMainPhoto(photo, e)}\n                                                />\n                                                <Button \n                                                    basic \n                                                    color='red' \n                                                    icon='trash' \n                                                    loading={target === photo.id && loading}\n                                                    onClick={e => handleDeletePhoto(photo, e)}\n                                                    disabled={photo.isMain}\n                                                    name={photo.id}\n                                                />\n                                            </Button.Group>\n                                        )}\n                                    </Card>\n                                ))}\n                            </Card.Group>\n                        )}\n                </Grid.Column>\n            </Grid>\n        </Tab.Pane>\n    )\n}) ","import { observer } from 'mobx-react-lite';\nimport React from 'react';\nimport { Tab } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport { useStore } from '../../app/stores/store';\nimport ProfileActivities from './ProfileActivities';\nimport ProfileFollowings from './ProfileFollowings';\nimport ProfilePhotos from './ProfilePhotos';\n/* import ProfilePhotos from './ProfilePhotos'; */\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileContent({profile}: Props) {\n    const {profileStore} = useStore();\n\n    const panes = [\n        {menuItem: 'About', render: () => <Tab.Pane>About Content</Tab.Pane>},\n        {menuItem: 'Photos', render: () => <ProfilePhotos profile={profile} />},\n        {menuItem: 'Events', render: () => <ProfileActivities/>},\n        {menuItem: 'Followers', render: () => <ProfileFollowings/>},\n        {menuItem: 'Following', render: () => <ProfileFollowings/>},\n    ];\n\n    return (\n        <Tab \n            menu={{fluid: true, vertical: true}}\n            menuPosition='right'\n            panes={panes}\n            onTabChange={(e, data) => profileStore.setActiveTab(data.activeIndex)}\n        />\n    )\n}) ","import { observer } from 'mobx-react-lite';\nimport { Divider, Grid, Header, Item, Segment, Statistic } from 'semantic-ui-react';\nimport { Profile } from '../../app/models/profile';\nimport FollowButton from './FollowButton';\n\ninterface Props {\n    profile: Profile;\n}\n\nexport default observer(function ProfileHeader({profile}: Props) {\n    return (\n        <Segment>\n            <Grid>\n                <Grid.Column width={12}>\n                    <Item.Group>\n                        <Item>\n                            <Item.Image avatar size='small' src={profile.image || '/assets/user.png'} />\n                            <Item.Content verticalAlign='middle'>\n                                <Header as='h1' content={profile.displayName} />\n                            </Item.Content>\n                        </Item>\n                    </Item.Group>\n                </Grid.Column>\n                <Grid.Column width={4}>\n                    <Statistic.Group widths={2}>\n                        <Statistic label='Followers' value={profile.followersCount} />\n                        <Statistic label='Following' value={profile.followingCount}/>\n                    </Statistic.Group>\n                    <Divider />\n                    <FollowButton profile={profile}/>\n                </Grid.Column>\n            </Grid>\n        </Segment>\n    )\n}) ","import { observer } from 'mobx-react-lite';\nimport React, { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Grid } from 'semantic-ui-react';\nimport LoadingComponent from '../../app/layout/LoadingComponents';\nimport { useStore } from '../../app/stores/store';\nimport ProfileContent from './ProfileContent';\nimport ProfileHeader from './ProfileHeader';\n\nexport default observer(function ProfilePage() {\n    const { username } = useParams<{ username: string }>();\n    const { profileStore } = useStore();\n    const { loadingProfile, loadProfile, profile, setActiveTab } = profileStore;\n\n    useEffect(() => {\n        loadProfile(username);\n        return () => setActiveTab(0);// to clean up our followings\n    }, [loadProfile, username, setActiveTab])\n\n    if (loadingProfile) return <LoadingComponent content='Loading profile...' />\n\n    return (\n        <Grid>\n            <Grid.Column width={16}>\n                {profile &&\n                    <>\n                        <ProfileHeader profile={profile} />\n                        <ProfileContent profile={profile} />\n                    </>}\n            </Grid.Column>\n        </Grid>\n    )\n}) ","import { Redirect, Route, RouteComponentProps, RouteProps } from \"react-router-dom\";\nimport { useStore } from \"../stores/store\";\n\ninterface Props extends RouteProps {\n    component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n}\n\nexport default function PrivateRoute({component: Component, ...rest}: Props) {\n    const {userStore: {isLoggedIn}} = useStore();\n    return (\n        <Route \n            {...rest}\n            render={(props) => isLoggedIn ? <Component {...props} /> : <Redirect to='/' />}\n        />\n    )\n}","import React, { useEffect } from 'react';\nimport { Container } from 'semantic-ui-react'\nimport NavBar from './NavBar';\nimport './styles.css'\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport ActivityForm from '../../features/activities/forms/ActivityForm';\nimport { observer } from 'mobx-react-lite';\nimport { Route, Switch, useLocation } from 'react-router';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityDetails from '../../features/activities/details/ActivityDetails';\nimport TestErrors from '../../features/errors/TestError';\nimport { ToastContainer } from 'react-toastify';\nimport NotFound from '../../features/errors/NotFound';\nimport ServerError from '../../features/errors/ServerError';\nimport { useStore } from '../stores/store';\nimport LoadingComponent from './LoadingComponents';\nimport ModalContainer from '../common/modals/ModalContainer';\nimport ProfilePage from '../../features/profiles/ProfilePage';\nimport PrivateRoute from './PrivateRoute';\n\nfunction App() {\n  const location = useLocation();\n  const {commonStore, userStore} = useStore();\n\n  useEffect(() => {\n    if (commonStore.token) {\n      userStore.getUser().finally(() => commonStore.setAppLoaded());\n    } else {\n      commonStore.setAppLoaded();\n    }\n  }, [commonStore, userStore])\n\n  if (!commonStore.appLoaded) return <LoadingComponent content='Loading app...' />\n\n  return (\n    <>\n    <ToastContainer position='bottom-right' hideProgressBar/>\n    <ModalContainer />\n      <Route exact path='/' component={HomePage}/>\n      <Route \n        path={'/(.+)'}\n        render={() =>(\n          <>\n            <NavBar />\n            <Container style={{marginTop:'7em'}}>\n              <Switch>\n                <PrivateRoute exact path='/activities' component={ActivityDashboard}/>\n                <PrivateRoute path='/activities/:id' component={ActivityDetails}/>\n                <PrivateRoute key={location.key}path={['/createActivity', '/manage/:id']} component={ActivityForm}/>\n                <PrivateRoute path='/profiles/:username' component={ProfilePage} />\n                <Route path='/errors' component={TestErrors} />\n                <Route path='/server-error' component={ServerError} />\n                <Route component={NotFound}/>\n              </Switch>\n            </Container>\n          </>\n        )}\n      />\n    </>\n  );\n}\n\nexport default observer(App);\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport default function ScrollToTop() {\n  const { pathname } = useLocation();\n\n  useEffect(() => {\n    window.scrollTo(0, 0);\n  }, [pathname]);\n\n  return null;\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './app/layout/styles.css';\nimport 'react-calendar/dist/Calendar.css';\nimport 'react-toastify/dist/ReactToastify.min.css'\nimport 'react-datepicker/dist/react-datepicker.css'\nimport App from './app/layout/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'semantic-ui-css/semantic.min.css'\nimport { store, StoreContext } from './app/stores/store';\nimport { Router } from 'react-router-dom';\nimport {createBrowserHistory} from 'history';\nimport ScrollToTop from './app/layout/ScrollToTop';\n\nexport const history = createBrowserHistory();\nReactDOM.render(\n  <StoreContext.Provider value={store}>\n    <Router history={history}>\n      <ScrollToTop />\n      <App />\n    </Router>\n  </StoreContext.Provider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}